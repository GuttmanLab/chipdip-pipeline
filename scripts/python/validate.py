import argparse
import re
import json
import yaml
from helpers import parse_chrom_map


def main():
    args = parse_arguments()
    verbose = not args.quiet

    config = dict()
    if args.config:
        with open(args.config, "rt") as f:
            if args.config.lower().endswith(".json"):
                config = json.load(f)
            elif args.config.lower().endswith(".yaml") or args.config.lower().endswith(".yml"):
                config = yaml.safe_load(f)
            else:
                raise ValueError(("Unrecognized file extension (not .json, .yaml, or .yml) for config file: "
                                  "{}".format(args.config)))

    path_chrom_map = args.chrom_map if args.chrom_map else config.get("path_chrom_map")
    if args.bt2_index_summary:
        if path_chrom_map:
            validate_chrom_map(args.bt2_index_summary, path_chrom_map, verbose=verbose)
        else:
            print("Bowtie 2 index summary path provided, but no chromosome name map specified.")
    # validate_config(config)
    # validate_barcode_config(config["bID"])
    # validate_format(config["format"])


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Check for common mistakes in configuring ChIP-DIP pipeline"
    )
    parser.add_argument(
        "-c",
        "--config",
        metavar="FILE",
        help=("path to JSON or YAML file of pipeline config. Parameters provided via additional arguments (e.g., "
              "--chrom_map) will supersede values in the config file."),
    )
    parser.add_argument(
        "--chrom_map",
        metavar="FILE",
        help="path to chromosome name map file (e.g., chrom_map.json)",
    )
    parser.add_argument(
        "--bt2_index_summary",
        metavar="FILE",
        help="path to Bowtie 2 index summary (i.e., bowtie2-inspect --summary <index>)",
    )
    parser.add_argument(
        "-q", "--quiet", action="store_true", help="suppress output"
    )
    return parser.parse_args()


def validate_config(config):
    # check that temp_dir is writeable 
    pass


def validate_barcode_config():
    pass


def validate_format():
    pass


def validate_chrom_map(path_bt2_index_summary, path_chrom_map, verbose=True):
    """
    Validate the chromosome name map against the Bowtie 2 index - i.e.,
    all chromosome name to be renamed should be in the Bowtie 2 index.

    Args
    - path_bt2_index_summary: str
        Path to Bowtie2 index summary, as generated by `bowtie2-inspect --summary <bt2_base>`
    - path_chrom_map: str
        Path to chromsome name map file.
    """
    chrom_sizes = parse_bt2_index_summary(path_bt2_index_summary)
    chrom_map = parse_chrom_map(path_chrom_map)
    genome_size = 0
    for chrom in chrom_map:
        assert chrom in chrom_sizes, (
            "Chromosome '{}' specified in chromosome name map '{}' not found in "
            "Bowtie 2 index summary '{}'"
        ).format(chrom, path_chrom_map, path_bt2_index_summary)
        genome_size += chrom_sizes[chrom]
    if verbose:
        print("Genome size of Bowtie 2 index:", sum(chrom_sizes.values()))
        print("Genome size of chromosome map:", genome_size)


def parse_bt2_index_summary(path_bt2_index_summary):
    """
    Parse the output of `bowtie2-inspect --summary <bt2_base>` to a dictionary mapping
    chromosome name to length. The chromosome name is truncated at the first whitespace,
    per SAM format specifications.
    """
    REGEX_BT2_SEQ_LINE = re.compile(r"^Sequence-\d+")
    chrom_sizes = dict()
    with open(path_bt2_index_summary, "rt") as f:
        for line in f:
            if not REGEX_BT2_SEQ_LINE.search(line):
                continue
            parts = line.strip().split("\t")
            name = parts[1]
            refname = name.split()[0]
            length = int(parts[-1])
            chrom_sizes[refname] = length
    return chrom_sizes


if __name__ == "__main__":
    main()
